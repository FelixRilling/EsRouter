{"version":3,"sources":["avenue.js"],"names":[],"mappingsfile":"avenue.js","sourcesContent":["var Avenue = (function () {\n'use strict';\n\n/**\r\n * Store Constants\r\n */\n\nvar _window = window;\nvar _document = _window.document;\nvar _location = _window.location;\n\n/**\r\n * Get data query for dom element\r\n * @private\r\n * @param {String} prefix Data prefix\r\n * @param {String} name Data name\r\n * @returns {String} Selector query\r\n */\n\nvar getDataQueryDom = function getDataQueryDom(prefix, name) {\n  return \"[data-\" + prefix + \"-\" + name + \"]\";\n};\n\n/**\r\n * Get data query for node property\r\n * @private\r\n * @param {String} prefix Data prefix\r\n * @param {String} name Data name\r\n * @returns {String} Prop query\r\n */\nvar getDataQueryProp = function getDataQueryProp(prefix, name) {\n  return prefix + name.substr(0, 1).toUpperCase() + name.substr(1);\n};\n\n/**\r\n * Read value of element data attribute\r\n * @param {Node} element The element node to check\r\n * @param {String} prefix The attribute prefix\r\n * @param {String} name The attribute name\r\n * @returns {String} Value of the attribute\r\n */\nvar readData = function readData(element, prefix, name) {\n  return element.dataset[getDataQueryProp(prefix, name)];\n};\n\n/**\r\n * Set value of element data attribute\r\n * @param {Node} element The element node to check\r\n * @param {String} prefix The attribute prefix\r\n * @param {String} name The attribute name\r\n * @param {String} value The attribute value\r\n */\nvar writeData = function writeData(element, prefix, name, value) {\n  element.dataset[getDataQueryProp(prefix, name)] = value;\n};\n\n/**\r\n * Query router elements\r\n * @param {Object} attributes The Options attributes property\r\n * @returns {Object} Object of query results\r\n */\nvar queryElements = function (attributes) {\n    var fieldKeys = Object.keys(attributes.types);\n    var result = {};\n\n    fieldKeys.forEach(function (key, i) {\n        var query = getDataQueryDom(attributes.prefix, attributes.types[key]);\n\n        result[key] = _document.querySelectorAll(query);\n    });\n\n    return result;\n};\n\n/**\r\n * NodeList iterate\r\n * @private\r\n * @param {NodeList} elements NodeList to iterate trough\r\n * @param {Function} fn Function to call\r\n */\n\nvar eachNode = function eachNode(elements, fn) {\n    [].forEach.call(elements, function (element) {\n        fn(element);\n    });\n};\n\n/**\r\n * Bind UI Events\r\n * @param {Object} elements The elements\r\n * @param {Object} type The event type\r\n * @param {Object} fn The event function\r\n */\nvar bind = function (elements, type, fn) {\n    eachNode(elements, function (element) {\n        element.addEventListener(type, function (ev) {\n            fn(element, ev);\n        }, false);\n    });\n};\n\n/**\r\n * Runs callback with injected API\r\n * @param {Object} context Instance context\r\n * @param {Function} fn Callback function\r\n * @param {Object} data Callback data\r\n * @param {Object} options Callback options\r\n * @param {Object} subEvents Callback subEvents\r\n */\n\nvar callback = function callback(fn, data, api, options, subEvents) {\n    if (typeof fn === \"function\") {\n        var args = [data, api];\n\n        if (options) {\n            args.push(options);\n        }\n        if (subEvents) {\n            args.push(subEvents);\n        }\n\n        fn.apply(null, args);\n    }\n};\n\n/**\r\n * Set new slug\r\n * @param {String} slugPrepend Slug prefix\r\n * @param {String} active Slug to set\r\n */\nvar setSlug = function setSlug(slugPrepend, active) {\n    _location.hash = slugPrepend + active;\n};\n\n/**\r\n * Read current slug\r\n * @param {String} slugPrepend Slug prefix\r\n * @returns {String} Slug value\r\n */\nvar getSlug = function getSlug(slugPrepend) {\n    return _location.hash.replace(slugPrepend, \"\").replace(\"#\", \"\");\n};\n\n/**\r\n * Move to id\r\n * @param {String} id Id to move to\r\n * @returns {Object} Avenue instance\r\n */\nvar moveTo$1 = function (instance, id) {\n    if (instance.data.ids.indexOf(id) > -1) {\n        var index = instance.data.ids.indexOf(id);\n        var element = instance.elements.field[index];\n\n        //beforeMove Callback\n        runCallbacks(instance, \"beforeMove\", {\n            id: id,\n            index: index,\n            element: element\n        });\n\n        //Set new section\n        instance.data.activeId = id;\n        instance.data.index = index;\n        setSlug(instance.options.slugPrepend, id);\n\n        //afterMove Callback\n        runCallbacks(instance, \"afterMove\", {\n            id: id,\n            index: index,\n            element: element\n        });\n    }\n\n    return instance;\n};\n\n/**\r\n * Move by Value\r\n * @param {Number} val Value to move by\r\n * @returns {Object} Avenue instance\r\n */\nvar _moveBy = function (instance, val) {\n    var newId = instance.data.ids[instance.data.index + val];\n\n    if (typeof newId !== \"undefined\") {\n        return moveTo$1(instance, newId);\n    }\n};\n\n/**\r\n * Returns avenue api\r\n * @param {Object} instance Avenue instance\r\n * @returns {Object} Avenue api\r\n */\nvar getApi = function (instance) {\n\n    //Avenue API\n    return {\n        data: instance.data,\n        options: instance.options,\n        elements: instance.elements,\n        callback: callback,\n        util: {\n            eachNode: eachNode\n        },\n        move: {\n            //Instance specific, needs context bind\n            moveTo: function moveTo(id) {\n                return moveTo$1(instance, id);\n            },\n            moveBy: function moveBy(val) {\n                return _moveBy(instance, val);\n            }\n        },\n        slug: {\n            setSlug: setSlug,\n            getSlug: getSlug\n        },\n        dom: {\n            queryElements: queryElements,\n            bind: bind,\n            readData: readData,\n            writeData: writeData\n        }\n    };\n};\n\n/**\r\n * Runs Plugin/User events\r\n * @param {Object} context Instance context\r\n * @param {String} type Event type\r\n * @param {Object} data Event data\r\n */\nvar runCallbacks = function (instance, type, data) {\n    var _plugins = instance.plugins;\n    var _api = getApi(instance);\n\n    //Call plugins\n    _plugins.active.forEach(function (plugin) {\n        var pluginObj = _plugins.container[plugin.name];\n        //Check if requested plugin exists\n        if (pluginObj) {\n            callback(pluginObj[type], data, _api, plugin.options, plugin.events);\n        } else {\n            throw \"Missing plugin \" + plugin.name;\n        }\n    });\n\n    //Call user events\n    callback(instance.events[type], data, _api);\n};\n\n/**\n * Init Avenue instance\n * @returns {Object} Avenue instance\n */\nvar init = function () {\n    var _this = this;\n    var _options = _this.options;\n    var slug = getSlug(_this.options.slugPrepend);\n\n    //beforeInit Callback\n    runCallbacks(_this, \"beforeInit\", {});\n\n    /**\n     * DOM\n     */\n    //Collect DOM elements\n    _this.elements = queryElements(_options.attributes);\n    if (_options.autobind) {\n        //Bind router-link events\n        bind(_this.elements.link, \"click\", function (element) {\n            var id = readData(element, _options.attributes.prefix, _options.attributes.types.link);\n\n            moveTo$1(_this, id);\n        });\n\n        //Bind router-pagination events\n        bind(_this.elements.pagination, \"click\", function (element) {\n            var val = Number(readData(element, _options.attributes.prefix, _options.attributes.types.pagination));\n\n            _moveBy(_this, val);\n        });\n    }\n\n    /**\n     * Data\n     */\n    //Read ids\n    eachNode(_this.elements.field, function (element) {\n        var id = readData(element, _options.attributes.prefix, _options.attributes.types.field);\n\n        if (element === _this.elements.fieldDefault[0]) {\n            _this.data.defaultId = id;\n        }\n\n        _this.data.ids.push(id);\n    });\n\n    /**\n     * Move\n     */\n    //Move to either saved slug or default id\n    if (slug !== \"\") {\n        moveTo$1(_this, slug);\n    } else {\n        moveTo$1(_this, _this.data.defaultId);\n    }\n\n    //afterInit Callback\n    runCallbacks(_this, \"afterInit\", {});\n\n    return _this;\n};\n\n/**\r\n * Basic Avenue Constructor\r\n * @constructor\r\n * @param {Object} options Options to use\r\n * @param {Object} events Events to use\r\n * @param {Array} plugins Array of plugins\r\n * @returns {Object} Avenue instance\r\n */\nvar Avenue = function Avenue(options, events, plugins) {\n    var _this = this;\n\n    //Options\n    options = options || {};\n    _this.options = {\n        autobind: options.autobind || true, //bind click events to data-router-href/link\n        slugPrepend: options.slugPrepend || \"\", //Prepend to slug, ex:\"currentSection=\"\n        attributes: {\n            //Name of the Data-atributes\n            prefix: \"router\",\n            types: {\n                //ex: prefix=\"router\",field=\"section\" -> \"data-router-section\"\n                field: \"section\",\n                fieldDefault: \"default\",\n                link: \"href\",\n                pagination: \"pagin\",\n                source: \"src\"\n            }\n        }\n    };\n\n    //Events\n    events = events || {};\n    _this.events = {\n        beforeInit: events.beforeInit,\n        afterInit: events.afterInit,\n        beforeMove: events.beforeMove,\n        afterMove: events.afterMove\n    };\n\n    //Instance Plugins\n    _this.plugins = {\n        active: plugins || [],\n        //Ref plugins from global constructor\n        container: Avenue.plugins\n    };\n\n    //Data\n    _this.data = {\n        ids: [],\n        activeId: null,\n        defaultId: null,\n        index: 0\n    };\n\n    //Elements\n    _this.elements = {};\n};\n\n//Plugins Container\nAvenue.plugins = {};\n\n/**\r\n * Expose Avenue methods\r\n */\nAvenue.prototype = {\n    init: init,\n    moveTo: function moveTo(id) {\n        return moveTo$1(this, id);\n    },\n    moveBy: function moveBy(val) {\n        return _moveBy(this, val);\n    },\n    moveForward: function moveForward() {\n        return _moveBy(this, 1);\n    },\n    moveBackward: function moveBackward() {\n        return _moveBy(this, -1);\n    }\n};\n\nreturn Avenue;\n\n}());\n"]}