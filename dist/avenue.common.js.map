{"version":3,"file":"avenue.common.js","sources":["../node_modules/lightdash/dist/esm/src/for/eachEntry.js","../node_modules/lightdash/dist/esm/src/str/lib/Delimiters.js","esm/src/location/location.js","esm/src/path/path.js","esm/src/path/isPathVariable.js","esm/src/route/lookup/routesMatch.js","esm/src/route/lookup/findRoute.js","esm/src/Avenue.js"],"sourcesContent":["/**\n * Iterates over each entry of an object.\n *\n * @memberof For\n * @param {object} obj Object to iterate.\n * @param {function} fn Function to use (`fn(key: *, val: *, index: number, obj: object) => void`).\n * @example\n * const a = {a: 1, b: 2};\n *\n * forEachEntry(a, (key, val, index) => {\n *     a[key] = val * index;\n * })\n * // a = {a: 0, b: 2}\n */\nconst forEachEntry = (obj, fn) => {\n    for (const [key, val] of Object.entries(obj)) {\n        fn(val, key, obj);\n    }\n};\nexport { forEachEntry };\n//# sourceMappingURL=eachEntry.js.map","var Delimiters;\n(function (Delimiters) {\n    Delimiters[\"KEBAB\"] = \"-\";\n    Delimiters[\"SNAKE\"] = \"_\";\n})(Delimiters || (Delimiters = {}));\nexport { Delimiters };\n//# sourceMappingURL=Delimiters.js.map","/**\n * Returns hash without init-character.\n *\n * @private\n * @returns {string} current location hash, without the hash.\n */\nconst getLocationHash = () => location.hash.replace(\"#\", \"\");\nexport { getLocationHash };\n//# sourceMappingURL=location.js.map","/**\n * Splits path by slashes and trims.\n *\n * @private\n * @param {string} path Path string.\n * @returns {Array<string>} trimmed path string array.\n */\nconst splitPath = (path) => path.split(\"/\").filter(item => item.length);\nexport { splitPath };\n//# sourceMappingURL=path.js.map","/**\n * Checks if the pathPart is a path variable.\n *\n * @private\n * @param {string} pathPart path string.\n * @returns {boolean} if the pathPart is a path variable.\n */\nconst isPathVariable = (pathPart) => pathPart[0] === \":\";\nexport { isPathVariable };\n//# sourceMappingURL=isPathVariable.js.map","import { isPathVariable } from \"../../path/isPathVariable\";\n/**\n * Checks if two routes match.\n *\n * @private\n * @param {Array<string>} currentPath first route.\n * @param {Array<string>} routePath second route.\n * @returns {boolean} if the first and second route match.\n */\nconst routesMatch = (currentPath, routePath) => currentPath.every((currentPathPart, index) => {\n    const routePathPart = routePath[index];\n    if (routePathPart) {\n        // Checks for variable-wildcard or equivalency\n        return (isPathVariable(routePathPart) ||\n            currentPathPart === routePathPart);\n    }\n    return false;\n});\nexport { routesMatch };\n//# sourceMappingURL=routesMatch.js.map","import { isPathVariable } from \"../../path/isPathVariable\";\nimport { routesMatch } from \"./routesMatch\";\n/**\n * Finds route by path.\n *\n * @private\n * @param {Array<string>} path path string array.\n * @param {object} routes object containing routes.\n * @returns {object|null} object containing route and args, or null if none was found.\n */\nconst findRoute = (path, routes) => {\n    const route = routes.find((routeCurrent) => routesMatch(path, routeCurrent[0]));\n    if (route) {\n        const args = {};\n        route[0].forEach((routePathPart, index) => {\n            if (isPathVariable(routePathPart)) {\n                args[routePathPart.substr(1)] = path[index];\n            }\n        });\n        return {\n            route,\n            args\n        };\n    }\n    return null;\n};\nexport { findRoute };\n//# sourceMappingURL=findRoute.js.map","import { forEachEntry } from \"lightdash\";\nimport { getLocationHash } from \"./location/location\";\nimport { splitPath } from \"./path/path\";\nimport { findRoute } from \"./route/lookup/findRoute\";\n/**\n * Avenue class.\n *\n * @class\n */\nclass Avenue {\n    /**\n     * Avenue constructor.\n     *\n     * @constructor\n     * @param {object} routes object of routes to use.\n     */\n    constructor(routes) {\n        this.view = null;\n        this.routes = [];\n        this.fallback = () => null;\n        // Change routes from {string: fn} to [string[], fn] and extract fallback route\n        forEachEntry(routes, (routeItemFn, routeItemPath) => {\n            if (routeItemPath === \"?\") {\n                this.fallback = routeItemFn;\n            }\n            else {\n                this.routes.push([splitPath(routeItemPath), routeItemFn]);\n            }\n        });\n        window.addEventListener(\"hashchange\", e => this.setView(getLocationHash(), e), false);\n        // Load current route if it exists\n        this.setView(getLocationHash());\n    }\n    /**\n     * Sets view to a route path.\n     *\n     * @param {string} path string route path.\n     * @param {Event|null} [e=null] event, if called through one.\n     */\n    setView(path, e = null) {\n        const result = findRoute(splitPath(path), this.routes);\n        if (result) {\n            this.view = path;\n            result.route[1](result.args, path, e);\n        }\n        else {\n            this.fallback({}, path, e);\n        }\n    }\n    /**\n     * Returns active view path.\n     *\n     * @returns {string|null} active view, or null if none was set.\n     */\n    getView() {\n        return this.view;\n    }\n}\nexport { Avenue };\n//# sourceMappingURL=Avenue.js.map"],"names":[],"mappings":"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"}